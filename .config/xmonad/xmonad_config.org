#+title: Xmonad Config
#+PROPERTY: header-args :tangle xmonad.hs
#+auto_tangle: t
#+STARTUP: showeverything

* Dependencies

#+begin_src haskell


-- Packet dependencies
--  * pulseaudi-ctl (AUR) for sound icon in xmobar
#+end_src

* Import section

#+begin_src haskell
-- Main
import XMonad
import System.IO (hPutStrLn, hPutStr, hClose)
import System.Exit
import qualified XMonad.StackSet as W
-- Actions
import XMonad.Actions.CycleWS (Direction1D(..), moveTo, shiftTo, WSType(..), nextScreen, prevScreen)
import XMonad.Actions.MouseResize
import XMonad.Actions.WithAll (sinkAll, killAll)
import XMonad.Actions.CopyWindow (kill1)
-- Data
import Data.Char (toUpper)
import Data.Monoid
import Data.Semigroup
import Data.Maybe (fromJust, isJust)
import qualified Data.Map as M
-- Hooks
import XMonad.Hooks.OnPropertyChange
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageDocks (avoidStruts, docksEventHook, manageDocks, ToggleStruts(..))
import XMonad.Hooks.SetWMName
import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat, isDialog, doCenterFloat, doRectFloat)
-- Treeselect
import Data.Tree
import qualified XMonad.Actions.TreeSelect as TS
-- Layouts
import XMonad.Layout.GridVariants (Grid(Grid))
import XMonad.Layout.ResizableTile
import XMonad.Layout.LayoutModifier
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.Simplest
import XMonad.Layout.Spacing
import XMonad.Layout.SubLayouts
import XMonad.Layout.WindowNavigation
import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))
-- Utilities
import XMonad.Util.Dmenu
import XMonad.Util.NamedActions
import XMonad.Util.EZConfig
import XMonad.Util.NamedScratchpad
-- import XMonad.Util.Scratchpad
import XMonad.Util.Run (runProcessWithInput, safeSpawn, spawnPipe)
import XMonad.Util.SpawnOnce
import Graphics.X11.ExtraTypes.XF86
import XMonad.Hooks.WindowSwallowing
#+end_src

#+RESULTS:

* String variables

#+begin_src haskell
------------------------------------------------------------------------
-- My Strings
------------------------------------------------------------------------
myTerminal :: String
myTerminal = "alacritty" -- Default terminal

myDmenu :: String
myDmenu = "dmenu_run -h 26 -bw 2 -W 1000 -l 10 -p Run:" -- Dmenu

myDmhub :: String
myDmhub = "~/.config/dmenu/dmenu_scripts/dm_menu.sh"  -- Path to dmenu helper scripts menu bar

myModMask :: KeyMask
myModMask = mod4Mask -- Super Key (--mod4Mask= super key --mod1Mask= alt key --controlMask= ctrl key --shiftMask= shift key)

myFont :: String
myFont = "xft:Ubuntu:size=14"

myBorderWidth :: Dimension
myBorderWidth = 2 -- Window border

myNormColor :: String -- Border color of normal windows
myNormColor = "#212733"

myFocusColor :: String -- Border color of focused windows
myFocusColor = "#55b4d4"

myEmacs :: String
myEmacs = "emacsclient -c -a 'emacs'"  -- Makes emacs keybindings easier to type
#+end_src

* Spacing setup

#+begin_src haskell
------------------------------------------------------------------------
-- Space between Tiling Windows
------------------------------------------------------------------------
mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing i = spacingRaw False (Border 30 10 10 10) True (Border 10 10 10 10) True
#+end_src

* Layouts

#+begin_src haskell
------------------------------------------------------------------------
-- Layout Hook
------------------------------------------------------------------------
myLayoutHook = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts full
               $ mkToggle (NBFULL ?? NOBORDERS ?? MIRROR ?? EOT) myDefaultLayout
             where
               myDefaultLayout =      withBorder myBorderWidth tall
                                  ||| full
                                  ||| grid
                                  ||| mirror
#+end_src

* Tiling layouts

#+begin_src haskell
------------------------------------------------------------------------
-- Tiling Layouts
------------------------------------------------------------------------
tall     = renamed [Replace "<fc=#95e6cb><fn=2> \61449 </fn>Tall</fc>"]
           $ smartBorders
           $ windowNavigation
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 8
           $ mySpacing 5
           $ ResizableTall 1 (3/100) (1/2) []
grid     = renamed [Replace " <fc=#95e6cb><fn=2> \61449 </fn>Grid</fc>"]
           $ smartBorders
           $ windowNavigation
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 12
           $ mySpacing 5
           $ mkToggle (single MIRROR)
           $ Grid (16/10)
mirror   = renamed [Replace " <fc=#95e6cb><fn=2> \61449 </fn>Mirror</fc>"]
           $ smartBorders
           $ windowNavigation
           $ subLayout [] (smartBorders Simplest)
           $ limitWindows 6
           $ mySpacing 5
           $ Mirror
           $ ResizableTall 1 (3/100) (1/2) []
full     = renamed [Replace " <fc=#95e6cb><fn=2> \61449 </fn>Full</fc>"]
           $ Full
#+end_src

* Workspaces
#+begin_src haskell
------------------------------------------------------------------------
-- Workspaces
------------------------------------------------------------------------
xmobarEscape :: String -> String
xmobarEscape = concatMap doubleLts
  where
    doubleLts x = [x]
myWorkspaces :: [String]
myWorkspaces = clickable . (map xmobarEscape) $ [" <fn=3>\61713</fn> ", " <fn=3>\61713</fn> ", " <fn=3>\61713</fn> ", " <fn=3>\61713</fn> ", " <fn=3>\61713</fn> "]
  where
    clickable l = ["<action=xdotool key super+" ++ show (i) ++ "> " ++ ws ++ "</action>" | (i, ws) <- zip [1 .. 5] l]
windowCount :: X (Maybe String)
windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset
#+end_src

* Scratchpads
#+begin_src haskell
------------------------------------------------------------------------
-- Scratch Pads
------------------------------------------------------------------------
myScratchPads :: [NamedScratchpad]
myScratchPads =
  [
      NS "cmus"                 launchCmus             (title =? "cmus")                    (customFloating $ W.RationalRect 0.15 0.15 0.7 0.7) ,
      NS "terminal"             launchTerminal         (title =? "scratchpad")              (customFloating $ W.RationalRect 0.15 0.15 0.7 0.7)
  ]
  where
    launchCmus     = myTerminal ++ " -t cmus -e cmus"
    launchTerminal = myTerminal ++ " -t scratchpad"

#+end_src

* TreeSelect
#+begin_src haskell
-------------------------------------------------------------------------
-- TreeSelect config
-------------------------------------------------------------------------

tsDefaultConfig :: TS.TSConfig a
tsDefaultConfig = TS.TSConfig { TS.ts_hidechildren = True
                              , TS.ts_background   = 0x00000000 --0xdd282c34
                              , TS.ts_font         = myFont
                              , TS.ts_node         = (0xffd0d0d0, 0xff1c1f24)
                              , TS.ts_nodealt      = (0xffd0d0d0, 0xff282c34)
                              , TS.ts_highlight    = (0xffffffff, 0xff755999)       --
                              , TS.ts_extra        = 0xff8087f7                     -- description color
                              , TS.ts_node_width   = 200
                              , TS.ts_node_height  = 30
                              , TS.ts_originX      = 100
                              , TS.ts_originY      = 100
                              , TS.ts_indent       = 80
                              , TS.ts_navigate     = TS.defaultNavigation
                              }

myTreeNavigation = M.fromList
    [ ((0, xK_Escape),   TS.cancel)
    , ((0, xK_Return),   TS.select)
    , ((0, xK_space),    TS.select)
    , ((0, xK_Up),       TS.movePrev)
    , ((0, xK_Down),     TS.moveNext)
    , ((0, xK_Left),     TS.moveParent)
    , ((0, xK_Right),    TS.moveChild)
    , ((0, xK_k),        TS.movePrev)
    , ((0, xK_j),        TS.moveNext)
    , ((0, xK_h),        TS.moveParent)
    , ((0, xK_l),        TS.moveChild)
    , ((0, xK_o),        TS.moveHistBack)
    , ((0, xK_i),        TS.moveHistForward)
    ]

treeselectAction :: TS.TSConfig (X ()) -> X ()
treeselectAction a = TS.treeselectAction a
  [ Node (TS.TSNode "Files" "" (return ()))
    [ Node (TS.TSNode "Nemo" "" (spawn "nemo")) []
    , Node (TS.TSNode "Baobab" "Disc capacity" (spawn "baobab")) []
    ]
  , Node (TS.TSNode "Palyers" "" (return()))
    [ Node (TS.TSNode "Cmus" "mp3 player" (spawn "alacritty -e cmus")) []
    ]
  , Node (TS.TSNode "Tools" "" (return()))
    [ Node (TS.TSNode "Obsidian" "" (spawn "obsidian")) []
    , Node (TS.TSNode "Qgis" "" (spawn "qgis")) []
    ]
  , Node (TS.TSNode "Github" "" (return()))
    [ Node (TS.TSNode "Meld" "Conflicts" (spawn "meld")) []
    ]
  , Node (TS.TSNode "Network" "" (return ()))
    [ Node (TS.TSNode "Postman" "" (spawn "postman")) []
    , Node (TS.TSNode "Wireshark" "" (spawn "wireshark")) []
    , Node (TS.TSNode "Fragments" "" (spawn "fragments")) []
    ]
  , Node (TS.TSNode "Graphics" "" (return()))
    [ Node (TS.TSNode "Pinta" "" (spawn "pinta")) []
    , Node (TS.TSNode "Krita" "" (spawn "krita")) []
    ]
  , Node (TS.TSNode "Utilities" ""(return()))
    [ Node (TS.TSNode "Pavucontrol" "Audio settings" (spawn "pavucontrol")) []
    , Node (TS.TSNode "Mugshot" "User avatar setter" (spawn "mugshot")) []
    , Node (TS.TSNode "Nvidia" "Nvidia Settings" (spawn "nvidia-settings")) []
    , Node (TS.TSNode "Font Matrix" "Font information" (spawn "fontmatrix")) []
    ]
  , Node (TS.TSNode "Gaming" "" (return()))
    [ Node (TS.TSNode "Steam" "" (spawn "steam")) []
--    , Node (TS.TSNode "Lutris" "" (spawn "lutris")) []
    ]
  ]
#+end_src

#+RESULTS:

* Custom functions
#+begin_src haskell
------------------------------------------------------
-- My Custom functions
------------------------------------------------------

-- Those functions are for keymap
subtitle' ::  String -> ((KeyMask, KeySym), NamedAction)
subtitle' x = ((0,0), NamedAction $ map toUpper
                      $ sep ++ "\n-- " ++ x ++ " --\n" ++ sep)
  where
    sep = replicate (16 + length x) '-'

showKeybindings :: [((KeyMask, KeySym), NamedAction)] -> NamedAction
showKeybindings x = addName "Show Keybindings" $ io $ do
  h <- spawnPipe $ "yad --text-info --fontname=\"SauceCodePro Nerd Font Mono 12\" --fore=#46d9ff back=#282c36 --center --geometry=1200x800 --title \"XMonad keybindings\""
  hPutStr h (unlines $ showKmSimple x) -- showKmSimple doesn't add ">>" to subtitles
  hClose h
  return ()
#+end_src
* Keybindings
#+begin_src haskell
------------------------------------------------------------------------
-- Custom Keys
-- use "xev" utility in terminal to get keycodes
------------------------------------------------------------------------
myKeys :: XConfig l0 -> [((KeyMask, KeySym), NamedAction)]
myKeys c =
    -- (subtitle "Custom Keys":) $ mkNamedKeymap c $
    let subKeys str ks = subtitle' str : mkNamedKeymap c ks in
    subKeys "Xmonad Essentials"
    [ ("M-<KP_Multiply>",      addName "Restart & recompile xmonad"   $ spawn "xmonad --recompile && xmonad --restart")
    , ("M1-m",                 addName "Tree menu"                    $ treeselectAction tsDefaultConfig)
    , ("M-q",                  addName "Close focused app"            $ kill1)
    , ("M-<Escape>",           addName "Toggle xkill mode"            $ spawn "xkill")
    , ("M-S-w",                addName "Close all apps on workspace"  $ killAll)
    , ("M-S-q",                addName "Quit xmonad"                  $ io exitSuccess)
    ]

    ^++^ subKeys "System Volume (PulseAudio)" -- System Volume (PulseAudio)
    [ ("<XF86AudioRaiseVolume>", addName "Volume Up"      $ spawn "pactl set-sink-volume @DEFAULT_SINK@ +10% && ~/.config/xmonad/scripts/sound_dunst.sh")
    , ("<XF86AudioLowerVolume>", addName "Volume Down"    $ spawn "pactl set-sink-volume @DEFAULT_SINK@ -10% && ~/.config/xmonad/scripts/sound_dunst.sh")
    , ("<XF86AudioMute>",        addName "Volume Mute"    $ spawn "pactl set-sink-mute @DEFAULT_SINK@ toggle")
    ]

    ^++^ subKeys "Dmenu actions"  -- Run Prompt
    [ ("M-S-<Return>",           addName "Spawn dmenu"           $ spawn (myDmenu))
    , ("M-p h",                  addName "Spawn Dmenu Hub"       $ spawn (myDmhub))
    ]

    ^++^ subKeys "App Hotkeys"  -- Apps
    [ ("M-b",                    addName "Spawn browser"         $ spawn "google-chrome-stable")
    , ("M-e e",                  addName "Emacs"                 $ spawn (myEmacs))
    , ("<Print>",                addName "ScreenShot"            $ spawn "flameshot gui")
    , ("M-<Return>",             addName "Spawn Terminal"        $ spawn (myTerminal))
    ]

    ^++^ subKeys "Windows navigation"  -- Windows navigation
    [ ("M-<Space>",              addName "Rotate through the layout"          $ sendMessage NextLayout)
    , ("M1-f",                   addName "Toggle full width"                  $ sendMessage (MT.Toggle NBFULL) >> sendMessage ToggleStruts)
    , ("M1-s",                   addName "All windows back to tiliong"        $ sinkAll)
    , ("M1-S-p>",                addName "Focused window back to tiling"      $ withFocused $ windows . W.sink)
    , ("M1-t",                   addName "Toggle my 'floats' layout"          $ sendMessage (T.Toggle "floats"))
    , ("M-<Left>",               addName "Swap focused window with master"    $ windows W.swapMaster)
    , ("M-<Up>",                 addName "Swap focused with previous"         $ windows W.swapUp)
    , ("M-<Down>",               addName "Swap focused with the next"         $ windows W.swapDown)
    ]

    ^++^ subKeys "Workspaces"  -- Workspaces
    [ ("M-.",                    addName "Focus next monitor"                 $ nextScreen)
    , ("M-,",                    addName "Focus Previous monitor"             $ prevScreen)
    , ("M-S-.",                  addName "Focused window to next workspace"   $ shiftTo Next nonNSP >> moveTo Next nonNSP)
    , ("M-S-,",                  addName "Focused window to prev workspace"   $ shiftTo Prev nonNSP >> moveTo Prev nonNSP)
    ]

    ^++^ subKeys "Window size manipulations" -- Window resizing
    [ ("M1-<Left>",              addName "Shrink horizonatal window width"    $ sendMessage Shrink)                          -- Shrink horiz window width
    , ("M1-<Down>",              addName "Shrink vert window width"           $ sendMessage MirrorShrink)                    -- Shrink vert window width
    , ("M1-<Up>",                addName "Expand vert window width"           $ sendMessage MirrorExpand)                    -- Expand vert window width
    , ("M1-<Right>",             addName "Expand horiz window width"          $ sendMessage Expand)                          -- Expand horiz window width
    , ("M-C-h",                  addName "Decrease screen spacing"            $ decScreenSpacing 4)                          -- Decrease screen spacing
    , ("M-C-k",                  addName "Increase window spacing"            $ incWindowSpacing 4)                          -- Increase window spacing
    , ("M-C-j",                  addName "Decrease window spacing"            $ decWindowSpacing 4)                          -- Decrease window spacing
    , ("M-C-l",                  addName "Increase window spacing"            $ incScreenSpacing 4)                          -- Increase screen spacing
    ]

    ^++^ subKeys "Brightness"
    [ ("<XF86MonBrightnessUp>",   addName "Brightness up"                     $ spawn "xbacklight -inc 5 && ~/.config/xmonad/scripts/brightness_dunst.sh")
    , ("<XF86MonBrightnessDown>", addName "Broghtbess down"                   $ spawn "xbacklight -dec 5 && ~/.config/xmonad/scripts/brightness_dunst.sh")
    ]

    -- Brightness Display 2
    --  , ("M1-<F1>",             addName "Night Mode"                  $ spawn "sh $HOME/.xmonad/scripts/brightness.sh + HDMI-A-1")      -- Night Mode
    --  , ("M1-<F2>",             addName "Day mode"                    $ spawn "sh $HOME/.xmonad/scripts/brightness.sh - HDMI-A-1")      -- Day mode
    --  , ("M1-S-<F1>",           addName "Reset redshift light"        $ spawn "sh $HOME/.xmonad/scripts/brightness.sh = HDMI-A-1")    -- Reset redshift light

    ^++^ subKeys "Scratchpads"
    [ ("M-m",                    addName "Scratchpad cmus"                  $ namedScratchpadAction myScratchPads "cmus")                         -- Cmus Player
    , ("M-t",                    addName "Scratchpad terminal"              $ namedScratchpadAction myScratchPads "terminal")                     -- Terminal
    ]
#+end_src

* For named scratchpads
#+begin_src haskell
------------------------------------------------------------------------
-- Neccessary for named scratchpads
------------------------------------------------------------------------
      where nonNSP          = WSIs (return (\ws -> W.tag ws /= "NSP"))
            nonEmptyNonNSP  = WSIs (return (\ws -> isJust (W.stack ws) && W.tag ws /= "NSP"))

#+end_src

* Floats
#+begin_src haskell
------------------------------------------------------------------------
-- Floats
------------------------------------------------------------------------
myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
myManageHook = composeAll
     [ className =? "confirm"                           --> doFloat
     , className =? "gsimplecal"                        --> doRectFloat (W.RationalRect 0.435 0.05 0.13 0.21)
     , className =? "file_progress"                     --> doFloat
     , resource  =? "desktop_window"                    --> doIgnore
     , className =? "MEGAsync"                          --> doFloat
     , className =? "mpv"                               --> doCenterFloat
     , className =? "Gthumb"                            --> doCenterFloat
     , className =? "Ristretto"                         --> doCenterFloat
     , className =? "feh"                               --> doCenterFloat
     , className =? "Galculator"                        --> doCenterFloat
     , className =? "Gcolor3"                           --> doFloat
     , className =? "dialog"                            --> doFloat
     , className =? "Downloads"                         --> doFloat
     , className =? "Save As..."                        --> doFloat
     , className =? "Xfce4-appfinder"                   --> doFloat
     , className =? "Org.gnome.NautilusPreviewer"       --> doRectFloat (W.RationalRect 0.15 0.15 0.7 0.7)
     , className =? "Xdg-desktop-portal-gtk"            --> doRectFloat (W.RationalRect 0.15 0.15 0.7 0.7)
     , className =? "nemo"                              --> doRectFloat (W.RationalRect 0.15 0.15 0.7 0.7)
     , className =? "Sublime_merge"                     --> doRectFloat (W.RationalRect 0.15 0.15 0.7 0.7)
     , isFullscreen -->  doFullFloat
     , isDialog --> doCenterFloat
     ] <+> namedScratchpadManageHook myScratchPads

-- myHandleEventHook :: Event -> X All
-- myHandleEventHook = dynamicPropertyChange "WM_NAME" (title =? "Spotify" --> floating)
        where floating = doRectFloat (W.RationalRect 0.15 0.15 0.7 0.7)
#+end_src
* Startup Hooks
#+begin_src haskell
------------------------------------------------------------------------
-- Startup Hooks
------------------------------------------------------------------------
myStartupHook = do
    spawnOnce "$HOME/.config/xmonad/scripts/autostart.sh"
    spawnOnce "/usr/bin/emacs --daemon"
    setWMName "LG3D"
#+end_src
* Main Do
#+begin_src haskell
------------------------------------------------------------------------
-- Main Do
------------------------------------------------------------------------
main :: IO ()
main = do
        xmproc0 <- spawnPipe ("xmobar -x 0 ~/.xmobarrc0")
        -- xmproc1 <- spawnPipe "/usr/bin/xmobar -x 1 ~/.xmobarrc0"
        xmonad $ addDescrKeys ((mod4Mask, xK_F1), showKeybindings) myKeys $ ewmh def
                { manageHook = myManageHook <+> manageDocks
                , handleEventHook = swallowEventHook (className =? "Alacritty" <||> className =? "XTerm") (return True)
                , logHook = dynamicLogWithPP $ filterOutWsPP [scratchpadWorkspaceTag] $ xmobarPP
                        { ppOutput = \x -> hPutStrLn xmproc0 x -- xmobar on monitor 1
                         --             >> hPutStrLn xmproc1 x -- xmobar on monitor 2
                         , ppCurrent = xmobarColor "#ff79c6" "" . \s -> " <fn=2>\61713</fn>"
                         , ppVisible = xmobarColor "#d4bfff" ""
                         , ppHidden = xmobarColor "#d4bfff" ""
                         , ppHiddenNoWindows = xmobarColor "#d4bfff" ""
                         , ppTitle = xmobarColor "#c7c7c7" "" . shorten 60
                         , ppSep =  "<fc=#212733>  <fn=1> </fn> </fc>"
                         , ppOrder  = \(ws:l:_:_)  -> [ws,l]
                        }
                , modMask            = mod4Mask
                , layoutHook         = myLayoutHook
                , workspaces         = myWorkspaces
                , terminal           = myTerminal
                , borderWidth        = myBorderWidth
                , startupHook        = myStartupHook
                , normalBorderColor  = myNormColor
                , focusedBorderColor = myFocusColor
                }
                -- `additionalKeysP` myKeys

-- Find app class name
-- xprop | grep WM_CLASS
-- https://xmobar.org/#diskio-disks-args-refreshrate
#+end_src
